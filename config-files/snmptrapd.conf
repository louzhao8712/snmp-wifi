###########################################################################
#
# snmptrapd.conf
#
#   - created by the snmpconf configuration program
#
###########################################################################
# SECTION: Output formatting for traps received.
#
#   Output from snmptrapd is formatted according to the
#   rules defined by the formatting configuration directives.

# format2: How SNMPv2 and SNMPv3 traps are formatted.
#   See the snmptrapd.conf manual page for format string details.
#   arguments: formatstring

#format2  



###########################################################################
# SECTION: Trap Handlers
#
#   Here we define what programs are run when a trap is
#   received by the trap receiver.

# traphandle: When traps are received, a program can be run.
#   When traps are received, the list of configured trap
#   handles is consulted and any configured program is run.
#   If no handler is found, any handler with "default" as the
#   traphandle type is run instead.  The information contained
#   in trap is passed to the program via standard input (see
#   the snmptrapd.conf manual page for details).
#   
#   arguments: oid|"default" program args

traphandle  POMI-MOBILITY-MIB::wifiNotif "/home/nikhilh/nox/src/nox/snmp-wifi/traphandler"
traphandle  POMI-MOBILITY-MIB::keepAliveNotif "/home/nikhilh/nox/src/nox/snmp-wifi/keepalivehandler"


###########################################################################
# SECTION: Logging options
#
#   Logging options

# logoption: Set options controlling where to log to
#   See -L options in the snmptrapd.conf man page

#logoption  

# printeventnumbers: Print event numbers (rising/falling alarm, etc.)
#   arguments: (1|yes|true|0|no|false)

printeventnumbers  yes
#authCommunity log public



###########################################################################
# SECTION: Runtime options
#
#   Runtime options

# donotfork: Do not fork from the shell
#   arguments: (1|yes|true|0|no|false)

donotfork  yes

disableAuthorization yes


###############################################################################
# Access Control
###############################################################################

# YOU SHOULD CHANGE THE "COMMUNITY" TOKEN BELOW TO A NEW KEYWORD ONLY
# KNOWN AT YOUR SITE.  YOU *MUST* CHANGE THE NETWORK TOKEN BELOW TO
# SOMETHING REFLECTING YOUR LOCAL NETWORK ADDRESS SPACE.

# By far, the most common question I get about the agent is "why won't
# it work?", when really it should be "how do I configure the agent to
# allow me to access it?"
#
# By default, the agent responds to the "public" community for read
# only access, if run out of the box without any configuration file in 
# place.  The following examples show you other ways of configuring
# the agent so that you can change the community names, and give
# yourself write access as well.
#
# The following lines change the access permissions of the agent so
# that the COMMUNITY string provides read-only access to your entire
# NETWORK (EG: 10.10.10.0/24), and read/write access to only the
# localhost (127.0.0.1, not its real ipaddress).
#
# For more information, read the FAQ as well as the snmpd.conf(5)
# manual page.

####
# First, map the community name (COMMUNITY) into a security name
# (local and mynetwork, depending on where the request is coming
# from):

#       sec.name  source          community
com2sec local     localhost       public
#com2sec noxtrial  172.24.74.117  public
com2sec mynetwork 172.27.74.0/24  public

####
# Second, map the security names into group names:

#             	sec.model  sec.name
group MyRWGroup	v1         local
group MyRWGroup	v2c        local
group MyRWGroup	usm        local
#group MyRWGroup	v1         noxtrial
#group MyRWGroup	v2c        noxtrial
#group MyRWGroup	usm        noxtrial
group MyROGroup v1         mynetwork
group MyROGroup v2c        mynetwork
group MyROGroup usm        mynetwork

####
# Third, create a view for us to let the groups have rights to:

#           incl/excl subtree                          mask
view all    included  .1                               80

####
# Finally, grant the 2 groups access to the 1 view with different
# write permissions:

#                context sec.model sec.level match  read   write  notif
access MyROGroup ""      any       noauth    exact  all    none   none
access MyRWGroup ""      any       noauth    exact  all    all    all

# rwuser: a SNMPv3 read-write user
#   arguments:  user [noauth|auth|priv] [restriction_oid]

#rwuser  admin  

# rocommunity: a SNMPv1/SNMPv2c read-only access community name
#   arguments:  community [default|hostname|network/bits] [oid]

#rocommunity  public  

# rwcommunity: a SNMPv1/SNMPv2c read-write access community name
#   arguments:  community [default|hostname|network/bits] [oid]

#rwcommunity  public

# -----------------------------------------------------------------------------


